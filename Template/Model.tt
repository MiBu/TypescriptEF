<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".ts"#><#

DefineMetadata();

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"Model.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

if (!code.VerifyCaseInsensitiveTypeUniqueness(code.GetAllGlobalItems(ItemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(fileManager);

foreach (var entity in code.GetItemsToGenerate<EntityType>(ItemCollection).OrderBy(e => e.Name))
{
    fileManager.StartNewFile(entity.Name + ".ts");
    BeginNamespace(namespaceName, code);
#>
export class <#=code.Escape(entity)#>
{
<#
    var propertiesWithDefaultValues = entity.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == entity && p.DefaultValue != null);
    var collectionNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    var complexProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity);

    if (entity.Properties.Any() || collectionNavigationProperties.Any())
    {
#>
    constructor (<#
		//TODO: riješiti kako da zarez ne prikazuje na kraju
		var firstProperty = entity.Properties.First();
		#><#=code.Escape(firstProperty)#>: <#= code.GetTypeName(firstProperty.TypeUsage) #><#
        foreach (var edmProperty in entity.Properties.Where(p => p != firstProperty))
        {#>, <#=code.Escape(edmProperty)#>: <#= code.GetTypeName(edmProperty.TypeUsage) #><# 
		}
#>)
    {
<#
    foreach (var edmProperty in entity.Properties)
    {#>
		this.<#=code.Escape(edmProperty).ToLower()#> = <#= code.Escape(edmProperty) #>;
<# 
	}
	#>
    }

<#
    }

    var simpleProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == entity);
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {
            WriteProperty(code, edmProperty);
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var complexProperty in complexProperties)
        {
            WriteProperty(code, complexProperty);
        }
    }

    var navigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity);
    if (navigationProperties.Any())
    {
#>

<#
        foreach (var navigationProperty in navigationProperties)
        {
            WriteNavigationProperty(code, navigationProperty);
        }
    }
#>
}
<#
    EndNamespace(namespaceName);
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
// <auto-generated>
//    This code was generated from a template.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
module <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";
void WriteProperty(CodeGenerationTools code, EdmProperty edmProperty)
{
	#>
	<#= code.Escape(edmProperty).ToLower() #> : <#+if(edmProperty.DefaultValue != null){#>
<#= code.GetTypeName(edmProperty.TypeUsage) #>
<#+} else {#>
<#=  code.GetTypeName(edmProperty.TypeUsage) #>;
<#+}
}

void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty)
{
    var endType = code.GetTypeName(navigationProperty.ToEndMember.GetEntityType());
	#>
	<#= code.Escape(navigationProperty).ToLower() #> : <#=code.Escape(navigationProperty)  #>[];
<#+
}

private void DefineMetadata()
{
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_NAME] = "TypeScriptDbContext";
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_VERSION] = "0.7";
    TemplateMetadata[MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION] = "4.0";
}
#>
